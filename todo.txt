Essentiell
----------

 
UI Design machen:
	prinzipielles Design machen
	Eindeutig zeigen wenn jemand gewonnen hat
	oder unentschieden ist
	(d.h. aus GameState und Active Player erkennen)

2) IR Fernbedienung duch Webapp auf Raspberry mit bluetooth ersetzen
	Raspberry in Betrieb nehmen: ok
	Grundlegende Implementierung der IR / Bluetooth Komm. verstehen:
		Verbindung mit Uhr über bluetoothctl erfolgreich
		(trust und connect ohne pairing)
		Name BT19730, MAC: 00:13:AA:00:BC:8C

		BT-Device ist kein HC-05 mit RFCOMM (geht nicht!)
		sondern HM-10, d.h. BLE mit Verwendung von GATT
		Erfolgreiche Kommunikation interaktiv über gatttool
			> gatttool -b 00:13:AA:00:BC:8C -I
			> connect
		z.B. Kommando 0xFF906F für Farbe Rot:
			- in Dez.: 16748655
			- Jede Ziffer der Zahl als ASCII-Zeichen darstellen,
			- d.h. "1" --> 0x31, "6" --> 0x36, usw.
			- alles ASCII Codes als Hexwerte ohne Trennzeichen und ohne \n schicken in gatttool:
			  > char-write-req 0x0025 3136373438363535
		
	Ansteuerung Bluetooth aus Backend

	Bluetooth mit Raspberry verstehen
	Fernbedienung in Backend nachbauen
	go build machen und testen
	Port für Backend freigeben
	Frontend für Fernbedienung
	svelte in backend einbinden

3)	Erweiterung Bluetooth Komm. für "Game Mode"

	Implementierung Ansteuerung Display für Animationen verstehen
	Hinzufügen Game Mode auf uC
	Ansteuerung Display im "Game Mode" auf uC umsetzen
	Frontend für game mode zum laufen bringen
	Bluetooth Kommunikation konzipieren
	Bluetooth Kommunikation in Server umsetzen
	Bluetooth Kommunikation in uC umsetzen

4) Docker





Verbesserungen
--------------
frontend:
	SMUI (svelte material UI) verwenden
	https://github.com/axios/axios verwenden
	für Darstellung Board CSS grid verwenden:
		https://medium.com/sketch-app-sources/css-grid-einf%C3%BChrung-in-5-minuten-verstehen-und-in-sketch-umsetzen-9e9e8a16b07e
