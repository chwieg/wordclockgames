Essentiell
----------

UI anpassen:
	Eindeutig zeigen wenn jemand gewonnen hat
	(d.h. aus GameState und Active Player erkennen)
Backend:
	AllowedMoves alle auf false setzen, wenn jemand gewonnen hat

2) IR Fernbedienung duch Webapp auf Raspberry mit bluetooth ersetzen
	Raspberry in Betrieb nehmen: ok
	Grundlegende Implementierung der IR / Bluetooth Komm. verstehen:
		Verbindung mit Uhr über bluetoothctl erfolgreich
		(trust und connect ohne pairing)
		Name BT19730, MAC: 00:13:AA:00:BC:8C

		todo: wie Kommandos senden?
		wie die das in Programm nachbauen?
		
		Versuch über RFCOMM Protokoll
		entsprechned go Beispiel
		https://golang.org/src/cmd/vendor/golang.org/x/sys/unix/syscall_linux.go?h=bluetooth
		Zeile 530ff

		Kommando für Knopf Region schicken:
		0xFF20DF (aus IRTrans..CLT.cpp)


	Bluetooth mit Raspberry verstehen
	Ansteuerung Bluetooth aus Backend
	Fernbedienung in Backend nachbauen
	go build machen und testen
	Port für Backend freigeben
	Frontend für Fernbedienung
	svelte in backend einbinden

3)	Erweiterung Bluetooth Komm. für "Game Mode"

	Implementierung Ansteuerung Display für Animationen verstehen
	Hinzufügen Game Mode auf uC
	Ansteuerung Display im "Game Mode" auf uC umsetzen
	Frontend für game mode zum laufen bringen
	Bluetooth Kommunikation konzipieren
	Bluetooth Kommunikation in Server umsetzen
	Bluetooth Kommunikation in uC umsetzen

4) Docker





Verbesserungen
--------------
frontend:
	SMUI (svelte material UI) verwenden
	https://github.com/axios/axios verwenden
	für Darstellung Board CSS grid verwenden:
		https://medium.com/sketch-app-sources/css-grid-einf%C3%BChrung-in-5-minuten-verstehen-und-in-sketch-umsetzen-9e9e8a16b07e
